public_data_dir = config['public_data_dir']
process_data_dir = config['process_data_dir']
min_readcount = config['min_readcount']
outdir = config['outdir']

fish_fastq_lst = ['MFZR1_S4_L001_R1_001.fastq', 'MFZR1_S4_L001_R2_001.fastq', 'MFZR2_S5_L001_R1_001.fastq', 'MFZR2_S5_L001_R2_001.fastq', 'MFZR3_S6_L001_R1_001.fastq', 'MFZR3_S6_L001_R2_001.fastq', 'ZFZR1_S1_L001_R1_001.fastq', 'ZFZR1_S1_L001_R2_001.fastq', 'ZFZR2_S2_L001_R1_001.fastq', 'ZFZR2_S2_L001_R2_001.fastq', 'ZFZR3_S3_L001_R1_001.fastq', 'ZFZR3_S3_L001_R2_001.fastq']
fish_tgz_lst = ['62829', '62831', '62833', '62835', '62837', '62839', '62841', '62843', '62845', '62847', '62849', '62851']
fish_dic = dict(zip(fish_fastq_lst, fish_tgz_lst))

bat_zip_lst = ['64342', '64342', '64341', '64340', '64339']
bat_fastq_lst = ['JSTR00932-0201ter_S1368_L001_R2_001.fastq.gz', 'JSTR00932-0201ter_S1368_L001_R2_001.fastq.gz', 'T-Fter_S859_L001_R2_001.fastq.gz', 'DPEF00808fcter_S1407_L001_R2_001.fastq.gz', 'DPEF00391fcter_S892_L001_R2_001.fastq.gz']
bat_dic = dict(zip(bat_fastq_lst, bat_zip_lst))

if "container" in config:
    container: config['container']

rule all:
    input:
        # dalu
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/dalu_bat_final_taxa.tsv"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/dalu_fish_final_taxa.tsv"),
        # obibar
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/obibar_bat_final_taxa.tsv"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/obibar_fish_final_taxa.tsv"),
        # vtam
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/vtam_bat_final_taxa.tsv"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/vtam_fish_final_taxa.tsv"),
        # count precision and sensitivity
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/control_counts.tsv"),
        # plots
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/bxplt_asvrichness.png"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/bxplt_betadiversity_intraspecies.png"),

rule summary:
    input:
        # dalu
        os.path.join(outdir, "dalu_bat/dalu_bat_final_taxa.tsv"),
        os.path.join(outdir, "dalu_fish/dalu_fish_final_taxa.tsv"),
        # obibar
        os.path.join(outdir, "obibar_bat/obibar_bat_final_taxa.tsv"),
        os.path.join(outdir, "obibar_fish/obibar_fish_final_taxa.tsv"),
        # vtam
        os.path.join(outdir, "vtam_bat/vtam_bat_final_taxa.tsv"),
        os.path.join(outdir, "vtam_fish/vtam_fish_final_taxa.tsv"),
        # count precision and sensitivity
        os.path.join(outdir, "count_precision_sensitivity/control_counts.tsv"),
    output:
        # dalu
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/dalu_bat_final_taxa.tsv"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/dalu_fish_final_taxa.tsv"),
        # obibar
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/obibar_bat_final_taxa.tsv"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/obibar_fish_final_taxa.tsv"),
        # vtam
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/vtam_bat_final_taxa.tsv"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/vtam_fish_final_taxa.tsv"),
        # count precision and sensitivity
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/control_counts.tsv"),
    shell:
        """cp {input[0]} {output[0]}
cp {input[1]} {output[1]}
cp {input[2]} {output[2]}
cp {input[3]} {output[3]}
cp {input[4]} {output[4]}
cp {input[5]} {output[5]}
cp {input[6]} {output[6]}
"""
        
rule plots:
    input:
        "metafiles/bat_sp.tsv",
        os.path.join(outdir, "dalu_bat/dalu_bat_final_taxa.tsv"),
        os.path.join(outdir, "dalu_fish/dalu_fish_final_taxa.tsv"),
        os.path.join(outdir, "obibar_bat/obibar_bat_final_taxa.tsv"),
        os.path.join(outdir, "obibar_fish/obibar_fish_final_taxa.tsv"),
        os.path.join(outdir, "vtam_bat/vtam_bat_final_taxa.tsv"),
        os.path.join(outdir, "vtam_fish/vtam_fish_final_taxa.tsv"),
    output:
        # plots
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/bxplt_asvrichness.png"),
        os.path.join(outdir, "summary_min_readcount_" + str(min_readcount) + "/bxplt_betadiversity_intraspecies.png"),
    shell:
        """Rscript scripts/bxplt_diversity_intraspecies.R {input[0]} {input[1]} {input[2]} {input[3]} {input[4]} {input[5]} {input[6]} {output[0]} {output[1]}"""

include: 'snakefiles/snkfl_count_precision_sensitivity.yml'

include: 'snakefiles/snkfl_analyse_obibar_bat.yml'
include: 'snakefiles/snkfl_analyse_obibar_fish.yml'
include: 'snakefiles/snkfl_analyse_obibar_fish_zfzr.yml'
include: 'snakefiles/snkfl_analyse_obibar_fish_mfzr.yml'

include: 'snakefiles/snkfl_analyse_dalu.yml'

include: 'snakefiles/snkfl_analyse_fish_vtam_pool.yml'
include: 'snakefiles/snkfl_analyse_fish_vtam_zfzr.yml'
include: 'snakefiles/snkfl_analyse_fish_vtam_mfzr.yml'
include: 'snakefiles/snkfl_analyse_bat_vtam.yml'

include: 'snakefiles/snkfl_prep_bat.yml'
include: 'snakefiles/snkfl_prep_fish_vtam.yml'
include: 'snakefiles/snkfl_prep_fish_dalu.yml'

include: 'snakefiles/snkfl_dwnld_bat.yml'
include: 'snakefiles/snkfl_dwnld_fish.yml'

rule gunzip_taxonomy:
    input:
        gz=os.path.join(process_data_dir, "osf.io/uzk87/taxonomy.tsv.gz"),
    output:
        tsv=os.path.join(outdir, "vtam_db/taxonomy.tsv"),
    shell:
        """gunzip -c {input.gz} > {output.tsv}"""

rule wget_taxonomy:
    output:
        gz=os.path.join(process_data_dir, "osf.io/uzk87/taxonomy.tsv.gz"),
    params:
        url="osf.io/uzk87/download",
        public_data_dir_path=public_data_dir,
    shell:
        "wget -nc -q -r {params.url} -O {output.gz}"
        
        

rule untar_blast_db:
    input:
        gz=os.path.join(process_data_dir, "osf.io/kw9ms/coi_blast_db_20200420.tar.gz"),
    output:
        untar=os.path.join(outdir, "vtam_db/coi_blast_db/coi_blast_db_20200420.nsq"),
    shell:
        "tar -zxvf {input.gz} -C $(dirname {output.untar})"

rule wget_blast_db:
    output:
        gz=os.path.join(process_data_dir, "osf.io/kw9ms/coi_blast_db_20200420.tar.gz"),
    params:
        url="osf.io/kw9ms/download",
        public_data_dir_path=public_data_dir,
    shell:
        "wget -nc -q -r {params.url} -O {output.gz}"

